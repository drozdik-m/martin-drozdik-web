@page "/work-experience"
@inherits RootPage
@attribute [Authorize(Roles = UserRoles.Developer + "," + UserRoles.Admin)]
@inject WorkExperienceService Service 

@code {
    public static BreadcrumbItem BreadcrumbItem { get; }
        = new BreadcrumbItem("Work experiences", href: "/work-experience", icon: MainLayout.WorkExperiencesIcon);

    protected List<BreadcrumbItem> breadcrumbItems = new()
    {
        MartinDrozdik.Web.Admin.Client.Pages.Index.BreadcrumbItem,
        BreadcrumbItem,
    };

    ListPage<WorkExperience, int> listPage;
}

<MudBreadcrumbs Items="breadcrumbItems" />

<MudText Typo="Typo.h3" Class="mb-1">Work Experiences</MudText>
<MudText Class="mb-4">What did I do? What did I learn?</MudText>

<ListPage @ref="listPage" TModel="WorkExperience" TKey="int" KeyGetter="e => e.Id"
    GetService="Service"
    AddService="Service" EntityCreator="() => new WorkExperience()"
    DeleteService="Service"
    ReorderService="Service" OrderExpression="e => e.OrderIndex">

    <DisplayItems>
        @if (!context.Models.Any())
        {
            <MudAlert Severity="Severity.Info">No work experiences added. I am useless.</MudAlert>
        }
        else
        {
            <MudTimeline TimelinePosition="TimelinePosition.Start">

                @foreach (var item in context.Models)
                {
                    <MudTimelineItem Size="Size.Medium" Color="@(item.Ended ? Color.Primary : Color.Info)" Elevation="25">
                        <MudCard Elevation="25">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@item.WorkPosition</MudText>
                                <MudText Typo="Typo.body2">@item.PlaceOfWork</MudText>
                                <MudText Typo="Typo.body2" Class="my-2">
                                    <b>
                                        @if (item.StartedDate.HasValue)
                                        {
                                            @($"from {item.StartedDate.Value.ToString("dd. MM. yyyy")}")
                                        }
                                        @if(item.EndedDate.HasValue && item.Ended)
                                        {
                                            @($" to {item.EndedDate.Value.ToString("dd. MM. yyyy")}")
                                        }
                                    </b>
                                </MudText>
                                <ListControlButton Disabled="context.Loading" 
                                    OnDelete="async _ => await listPage.DeleteAsync(item.Id)"
                                    HrefEdit="@($"/work-experience/{item.Id}")"/>
                            </MudCardContent>
                        </MudCard>
                    </MudTimelineItem>
                }            

            </MudTimeline>
        }
    </DisplayItems>
    
    <AddInputs>
        <MudTextField @bind-Value="context.Model.WorkPosition" Disabled="context.Loading" Label="Name" Variant="Variant.Text" 
                        Immediate="true" HelperText="The position where I worked" 
                        Required="true" RequiredError="A work position is required" />
    </AddInputs>

    <ReorderItem>
        <MudListItem Icon="@Icons.Material.Filled.DragHandle" Text="@($"{context.WorkPosition}")" />
    </ReorderItem>
</ListPage>