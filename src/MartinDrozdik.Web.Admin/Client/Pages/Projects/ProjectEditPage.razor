@page "/project/{id:int}"
@inherits RootPage
@attribute [Authorize(Roles = UserRoles.Developer + "," + UserRoles.Admin)]
@inject ProjectService Service
@inject ProjectLogoService LogoService
@inject ProjectOgImageService OgImageService
@inject ProjectTagService TagService
@inject ProjectDeveloperService ProjectDeveloperService
@inject PersonService PersonService

@code{
    [Parameter]
    public int Id { get; set; }

    public static BreadcrumbItem BreadcrumbItem(int id, string name)
        => new(name, href: $"/project/{id}", icon: Icons.Material.Filled.Edit);

    protected List<BreadcrumbItem> breadcrumbItems = new()
    {
        MartinDrozdik.Web.Admin.Client.Pages.Index.BreadcrumbItem,
        ProjectPage.BreadcrumbItem,
        PredefinedBreadcrumbs.Loading
    };

    Project entity;

    protected void OnEntityLoad(Project entity)
    {
        this.entity = entity;
        breadcrumbItems[breadcrumbItems.Count - 1] = BreadcrumbItem(entity.Id, entity.Name);
        StateHasChanged();
    }
}

<MudBreadcrumbs Items="breadcrumbItems" />

@if(entity is null)
{
    <MudText Typo="Typo.h3" Class="mb-4">Loading...</MudText>
}
else
{
    <MudText Typo="Typo.h3" Class="mb-4">Editing: @entity.Name</MudText>
}

<EditPage Id="Id" OnEntityLoad="OnEntityLoad"
    GetService="Service"
    UpdateService="Service">
    <Editor>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="false" PanelClass="pa-6" Color="@Color.Primary">

            @* General info *@
            <MudTabPanel Text="General" Icon="@Icons.Material.Filled.Settings">
                <MudTextField @bind-Value="context.Model.Name" Disabled="context.Disabled" Label="Name" 
                    Variant="Variant.Text" Class="my-3"
                    Immediate="true" HelperText="The name of this project" 
                    Required="true" RequiredError="A name is required" />

                <MudSwitch @bind-Checked="context.Model.IsHidden" Disabled="context.Disabled" 
                    Class="my-4"
                    ThumbIconColor=@(context.Model.IsHidden ? Color.Dark : Color.Secondary)
                    Label="@(context.Model.IsHidden ? "Hidden" : "Visible")"
                    ThumbIcon="@(context.Model.IsHidden ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"/>

                <MudGrid>
                    <MudItem xs="9">
                        <MudTextField @bind-Value="context.Model.UrlName" Disabled="context.Disabled" Label="Url key" Variant="Variant.Text" 
                                Immediate="true" HelperText="The url key of this project" 
                                Required="true" RequiredError="A url key is required" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Info" Class="mt-5"
                                OnClick="_ => { context.Model.UrlName = context.Model.Name.ToUrlFriendly(); }">Generate</MudButton>
                    </MudItem>
                </MudGrid> 

                <MudTextField @bind-Value="context.Model.Abstract" Disabled="context.Disabled" 
                    Label="Abstract" Class="my-4"
                    Variant="Variant.Outlined" Lines="8"
                    Immediate="true" HelperText="Abstract of the article (= the first paragraph)" />

                <MudDatePicker @bind-Date="context.Model.FinishedTime" Disabled="context.Disabled"
                    Label="Project finished date" DateFormat="dd. MM. yyyy" />
            </MudTabPanel>

            @* Logo *@
            <MudTabPanel Text="Logo" Icon="@Icons.Material.Filled.Image">
                <ImageEditor Id="context.Model.LogoId" @bind-Image="context.Model.Logo"
                    ReadOnly="context.Disabled"
                    AddService="LogoService" 
                    DeleteService="LogoService"
                    GetService="LogoService"
                    UpdateService="LogoService"> 

                    <ImageDisplay Context="image">
                        <MudImage Height="512" Src="@image.Uri" Alt="@image.AlternativeText"  Elevation="25" Class="rounded-lg" />
                    </ImageDisplay>

                </ImageEditor>
            </MudTabPanel>

            @* Og image *@
            <MudTabPanel Text="OG image" Icon="@Icons.Material.Filled.ImageAspectRatio">
                <ImageEditor Id="context.Model.OgImageId" @bind-Image="context.Model.OgImage"
                    ReadOnly="context.Disabled"
                    AddService="OgImageService" 
                    DeleteService="OgImageService"
                    GetService="OgImageService"
                    UpdateService="OgImageService"> 

                    <ImageDisplay Context="image">
                        <MudImage Height="512" Src="@image.Uri" Alt="@image.AlternativeText"  Elevation="25" Class="rounded-lg" />
                    </ImageDisplay>

                </ImageEditor>
            </MudTabPanel>

            @* Tags *@
            <MudTabPanel Text="Tags" Icon="@Icons.Material.Filled.Tag">
                <ModelCollectionInput TConnector="ProjectTag" TKey="int" TModel="ProjectTag" @bind-Items="context.Model.Tags"
                    GetOptionsService="TagService" Unique="true" IdGetter="e => e.Id"
                    ReorderService="TagService" OrderExpression="e => e.OrderIndex"
                    ConnectorFactory="e => e" IsAlreadySelected="(e, c) => c.Any(f => f.Id == e.Id)"
                    ReadOnly="context.Disabled">
                    <DisplayItem Context="tag">
                        @tag.ToString()
                    </DisplayItem>
                    <ReorderItem Context="tag">
                        <MudListItem Icon="@Icons.Material.Filled.DragHandle" Text="@($"{tag.Name}")" />
                    </ReorderItem>
                </ModelCollectionInput>
            </MudTabPanel>

            @* Developers *@
            <MudTabPanel Text="Developers" Icon="@Icons.Material.Filled.Person">
                <ModelCollectionInput TConnector="ProjectDeveloper" TKey="int" TModel="Person" @bind-Items="context.Model.Developers"
                    GetOptionsService="PersonService" Unique="true" IdGetter="e => e.Id"
                    ReorderService="ProjectDeveloperService" OrderExpression="e => e.OrderIndex"
                    ConnectorFactory="e => new ProjectDeveloper(){ ProjectsId = entity.Id, Person = e, PersonsId = e.Id }" 
                    IsAlreadySelected="(e, c) => c.Any(f => f.PersonsId == e.Id)" 
                    ReadOnly="context.Disabled">
                    <DisplayItem Context="connection">
                        @connection.Person.Name
                    </DisplayItem>
                    <ReorderItem Context="connection">
                        <MudListItem Icon="@Icons.Material.Filled.DragHandle" Text="@($"{connection.Person.Name}")" />
                    </ReorderItem>
                    <EditItem Context="connection">
                        <MudTextField @bind-Value="connection.Model.Position" Disabled="context.Disabled" Label="Role" 
                            Variant="Variant.Text" Class="my-3"
                            Immediate="true" HelperText="The role/position of this person in the project" />
                    </EditItem>
                </ModelCollectionInput>
            </MudTabPanel>
        </MudTabs>

    </Editor>
</EditPage>