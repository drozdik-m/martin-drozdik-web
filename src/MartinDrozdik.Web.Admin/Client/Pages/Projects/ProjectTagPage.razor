@page "/project-tag"
@inherits RootPage

<MudBreadcrumbs Items="breadcrumbItems" />

<MudText Typo="Typo.h3" Class="mb-3">Project tags</MudText>

@* Error space *@
@if(!(lastException is null))
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@lastException.Message</MudAlert>
}

@* Reorder *@
<MudButtonGroup OverrideStyles="false">
    <MudButton Variant="Variant.Filled" 
        Color="@(reordering ? Color.Success : Color.Primary)" 
        Disabled="reorderLoading"
        StartIcon="@(reordering ? Icons.Material.Filled.Check : Icons.Material.Filled.Cached)" 
        OnClick="async _ => await OrderControlButton()">
        @if (reorderLoading)
        {
            <MudText Class="me-3">Saving order</MudText>
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
        }
        else if(reordering)
        {
            <MudText>Confirm order</MudText>
        }
        else
        {
            <MudText>Reorder</MudText>
        }
    </MudButton>
    @if (reordering)
    {
        <MudButton Disabled="reorderLoading" Variant="Variant.Filled" Color="Color.Error" 
            StartIcon="@Icons.Material.Filled.Clear" 
            OnClick="async _ => await RevertReorderAsync()">
            Cancel
        </MudButton>
    }                     
</MudButtonGroup>


@* Item list *@
<div class="relative my-5">
    @if(reordering)
    {
        <MudDropContainer T="ProjectTag" @ref="reorderContainer" ItemIsDisabled="@(_ => reorderLoading)" Items="@Entities" ItemsSelector="@((item, dropzone) => true)" ItemDropped="ReorderUpdated" >
		    <ChildContent>
			    <MudList Clickable="false">
			        <MudListSubheader>Drop Zone</MudListSubheader>
					<MudDropZone T="ProjectTag" Identifier="reorder" AllowReorder="true" />
				</MudList>
		    </ChildContent>
		    <ItemRenderer>
			    <MudListItem Icon="@Icons.Material.Filled.DragHandle" Text="@($"{context.Name}")" />
		    </ItemRenderer>
	    </MudDropContainer>
    }
    else
    {
        <MudSimpleTable Elevation="4" Hover="true" Striped="true" Dense="true" Style="overflow-x: auto;">
            @if(reloadLoading)
            {
                <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                </MudOverlay>
            }
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Assigned projects</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if(reloadLoading && Entities.Count == 0)
                {
                    for(var i = 0; i < 10; i++)
                    {
                        <tr>
                            <td><MudSkeleton /></td>
                            <td><MudSkeleton /></td>
                            <td><MudSkeleton /></td>
                        </tr>
                    }
                }
                @foreach (var tag in DisplayEntities)
                {
                    <tr>
                        <td>@tag.Name</td>
                        <td>@tag.Projects.Count</td>
                        <td>
                            <MudButtonGroup OverrideStyles="false">
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="async _ => await DeleteAsync(tag.Id)">Delete</MudButton>
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Info">Edit</MudButton>
                            </MudButtonGroup>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }

</div>

@* Delete *@
<MudDialog @bind-IsVisible="deleteDialogOpen" Options=@(new() { FullWidth = true }) >
    <TitleContent>
        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3"/>Delete item</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete this item?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="_ => deleteDialogOpen = false">Cancel</MudButton>
        <MudButton Color="@Color.Error" Variant="Variant.Filled" Disabled="deleteLoading" EndIcon="@Icons.Material.Filled.Delete" OnClick="@(async _ => await ConfirmDeleteAsync())">
            @if (deleteLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Deleting</MudText>
            }
            else
            {
                <MudText>Delete</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@* Add new item *@
<MudFab Class="fabBottomRight" Color="Color.Primary" 
    OnClick="@(async e => await AddItemAsync())" 
    StartIcon="@Icons.Material.Filled.Add" />


    <MudDialog @bind-IsVisible="addNewDialogOpen" Options=@(new() { FullWidth = true }) >
        <TitleContent>
            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/>Add item</MudText>
        </TitleContent>
        <DialogContent>
            <MudForm @ref="addForm" @bind-IsValid="@addFormValid">
            @*@if(addLoading)
            {
                <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                </MudOverlay>
            }*@
                <MudTextField @bind-Value="addItem.Name" Disabled="addLoading" Label="Name" Variant="Variant.Text" 
                        Immediate="true" HelperText="The name of this tag" 
                        Required="true" RequiredError="A name is required" />

                <div class="d-flex justify-end my-3">
                    <MudButton Variant="Variant.Text" Color="Color.Dark" Disabled="addLoading" OnClick="e => addNewDialogOpen = false" Class="mr-2 px-3">Close</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(addLoading)" OnClick="@(async _ => await AddItemConfirmAsync())" EndIcon="@Icons.Material.Filled.Add">
                            @if (addLoading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Create</MudText>
                            }
                    </MudButton>
                </div>
            </MudForm>
            
        </DialogContent>
    </MudDialog>


@*<MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>*@